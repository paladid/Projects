#include <stdio.h>
#include <string.h>
#include <stdint.h>
#include <stdlib.h>
#include <time.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>
#include <sys/sysmacros.h>
#include <sys/socket.h>
#include <strings.h>
#include <arpa/inet.h>

/*char* TestArray(int *NumCh){
  char szo[4] = "abc";
  char* ptr = (char*)malloc(9);
  if(ptr == NULL){
    fprintf(stderr, "Hiba történt a memóriafoglalás közben");
    exit(1);
  }
  for(int i = 0; i <= 8; i++){
    ptr[i] = rand() % 256;
  }

  for(int i = 0; i <= 2; i++){
    ptr[i*3+0] = (ptr[i*3+0]& (~3)) + (szo[i]&3);
    ptr[i*3+1] = (ptr[i*3+1]& (~7)) + ((szo[i]&28)>>2);
    ptr[i*3+2] = (ptr[i*3+2]& (~7)) + ((szo[i]&224)>>5);
  }
  
  (*NumCh) = 9;
  return ptr;
}*/

char* Unwrap(char* Pbuff, int NumCh){
  char* ptr = (char*)malloc((NumCh/3)+1);
  if(ptr == NULL){
    fprintf(stderr, "Hiba történt a memóriafoglalás közben");
    exit(1);
  }
  for(int i = 0;i < NumCh/3 ; i++){
    ptr[i] = (Pbuff[(i*3)]&3)<<6 | (Pbuff[(i*3)+1]&7)<<3 | (Pbuff[(i*3)+2]&7);
  }

  ptr[(NumCh/3)] = '\0';

  free(Pbuff);
  return ptr;
}

char* ReadPixels(int f, int* NumCh){
  char buff[14];
  read(f,buff,14);
  int filesize = ((int*)(buff+2))[0];
  int code = ((int*)(buff+2))[1];
  int data = ((int*)(buff+2))[2];

  char buff2[40];
  read(f,buff2,40);

  char* ptr = (char*)malloc(filesize-54);
  if(ptr == NULL){
    fprintf(stderr, "Hiba történt a memóriafoglalás közben");
    exit(1);
  }

  read(f,ptr,filesize-54);

  *NumCh = code;
  
  return ptr;
}

int BrowseForOpen(){

  char filename[50];

  struct stat inode;
  DIR *d;
  struct dirent *entry;

  chdir(getenv("HOME"));
  while(1){
    d = opendir(".");
    while((entry=readdir(d))!=NULL)
      {
        printf("%s\n",(entry)->d_name);
      }

    fflush(stdout);

    scanf("%s",filename);

    struct stat filestat;

    if(stat(filename,&filestat)!=-1){
      if((filestat.st_mode & S_IFMT)==S_IFDIR){
        chdir(filename);
      } else {
        break;
      }
    } else {
      printf("A megadott név nem létezik");
    }
  }

  int file = open(filename,O_RDONLY);

  return file;

  return 0;
}

int Post(char *neptunID, char *message, int NumCh){

  int sockfd, connfd;
  struct sockaddr_in servaddr, cli;

  sockfd = socket(AF_INET, SOCK_STREAM, 0);
  if (sockfd == -1) {
      printf("socket creation failed...\n");
      exit(1);
  }

  bzero(&servaddr, sizeof(servaddr));

  servaddr.sin_family = AF_INET;
  servaddr.sin_addr.s_addr = inet_addr("193.6.135.162");
  servaddr.sin_port = htons(80);
  connect(sockfd, (struct sockaddr*)&servaddr, sizeof(servaddr));

  char data[1024];

  strcat(data,"NeptunID=");
  strcat(data,neptunID);
  strcat(data,"&PostedText=");
  strcat(data,message);

  char inttostr[5];

  sprintf(inttostr,"%d",(int)strlen(data));

  char msg[1024];

  strcat(msg,"POST /~vargai/post.php HTTP/1.1\r\n");
  strcat(msg,"Host: irh.inf.unideb.hu\r\n");
  strcat(msg,"Content-Length: ");
  strcat(msg,inttostr);
  strcat(msg,"\r\n");
  strcat(msg,"Content-Type: application/x-www-form-urlencoded\r\n");
  strcat(msg,"\r\n");
  strcat(msg,data);
                    

  send(sockfd,msg,strlen(msg),SOCK_STREAM);

  char buff[1024];

  recv(sockfd,buff,sizeof(buff),0);

  close(sockfd);

  if(strstr(buff,"The message has been recieved")==0){
    return 1;
  }

  return 0;
}


int main(int argc, char* argv[]){

  char filename[100];
  int file;
  int pixellength;
  char* pixelbuff;
  char* decodebuff;
  char neptunID[7] = "VYTSWX";
  srand(time(0));

  if (argc <= 1){
    file = BrowseForOpen();
    if(file==-1){
      fprintf(stderr,"Hiba történt a file megnyitása során");
      return 1;
    }
  } else if (strcmp(argv[1],"--version") == 0) {
    printf("Build: 1.0\nRelease: 2021.04.26\nAuthor: Paládi Sándor\n");
    return 0;
  } else if(strcmp(argv[1],"--help") == 0){
    printf("--version\n--help\n");
    return 0;
  } else {
    strcpy(filename,argv[1]);
    file = open(filename,O_RDONLY);
    if(file==-1){
      fprintf(stderr,"Hiba történt a file megnyitása során");
      return 1;
    }
  }

  pixelbuff = ReadPixels(file,&pixellength);
  decodebuff = Unwrap(pixelbuff,pixellength);

  //printf("%s\n",decodebuff);

  write(1,decodebuff,pixellength);

  close(file);

  Post(neptunID,decodebuff,pixellength);

  free(decodebuff);

  /*int memory;
  char* result; 

  char* code = TestArray(&memory);

  result = Unwrap(code,memory);

  printf("%s\n",result);

  free(result);*/

  return 0;
}